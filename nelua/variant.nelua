require "string"

## local function make_variant(rec)
  ## static_assert(type(rec) == "table", "Variant `rec` must be a record type")
  ## static_assert(rec.is_record, "Variant `rec` must be a record type")
  ##[[
    local Ts = {}
    local fields = {}
    for i, node in ipairs(rec.fields) do
        fields[node.name] = node
        table.insert(Ts, i, tostring(node.type))
    end
  ]]

  local VariantTag = @enum{
    _init_ = 0
  }
  local VariantVal = @union{}
  ##[[
    local tags = {}
    local tag_names = {}
    local i = 1
    for name, node in pairs(fields) do
      VariantVal.value:add_field(name, node.type)
      VariantTag.value.fields[i] = {
        index = i,
        name = name
      }
      tags[name] = i
      tag_names[i] = name
      i = i + 1
    end
  ]]

  local VariantT: type <nickname(#[string.format("Variant(%s)", table.concat(Ts, ", "))]#)> = @record{
    tag: VariantTag,
    val: VariantVal
  }

  local function tag_tostring(tag: VariantTag): string
    ## for name in pairs(fields) do
      ## local i = tags[name]
      if tag == #[i]# then
        return #[tag_names[i]]#
      end
    ## end
    if tag == 0 then
      return "UNSET"
    end
    return ""
  end
  
  function VariantT:is(): string
    return tag_tostring(self.tag)
  end

  ## for name, node in pairs(fields) do
    ## local T = node.type
    ## local tag = tags[name]
    function VariantT.#|name|#(v: #[T]#): VariantT
      local val: VariantT
      val.tag = #[tag]#
      val.val.#|name|# = v
      return val
    end

    function VariantT:#|"is_" .. name|#(): boolean
      return self.tag == #[tag]#
    end

    function VariantT:#|"get_" .. name|#(): #[T]#
      assert(self.tag == #[tag]#, ("Cannot get tag, tag is `%s` not `%s`"):format(self:is(), #[name]#))
      return self.val.#|name|#
    end

  ## end

  ## VariantT.value.is_variant = true
  ## VariantT.value.subtype = rec

  ## return VariantT
## end

local Variant = #[generalize(make_variant)]#

return Variant
